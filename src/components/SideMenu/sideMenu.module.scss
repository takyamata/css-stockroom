@use '@styles/mixin' as *;
.root {
    grid-area: sidemenu;
    background-color: var(--sidemenu);
    border-right: 0.1rem solid var(--border);
    position: absolute;
    top: 0;
    width: 20rem;
    transition: transform 0.2s ease;
    box-shadow: none;
    height: calc(100lvh - 5rem);
    position: fixed;
    top: 50%;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    &[data-position='left'] {
        border-radius: 0 1.2rem 1.2rem 0;
    }
    &[data-position='right'] {
        border-radius: 1.2rem 0 0 1.2rem;
    }
    // openの共通
    &[data-state='open'] {
        box-shadow: 0 0 1rem 0 rgba(black, 0.2);
        &::before,
        &::after {
            opacity: 0.05;
        }
    }
    // 左で閉じているとき
    &[data-position='left'][data-state='close'] {
        left: 0;
        transform: translate(calc(-100% - 1.5rem), -50%);
        &::before {
            right: -2.5rem;
        }
        &::after {
            right: -3.5rem;
        }
    }
    // 右で閉じているとき
    &[data-position='right'][data-state='close'] {
        left: 100%;
        transform: translate(calc(0% + 1.5rem), -50%);
        &::before {
            left: -2.5rem;
        }
        &::after {
            left: -3.5rem;
        }
    }
    // 左で開いているとき
    &[data-position='left'][data-state='open'] {
        left: 0;
        transform: translate(0, -50%);
        &::before {
            right: -2.5rem;
        }
        &::after {
            right: -3.5rem;
        }
    }
    // 右で閉じているとき
    &[data-position='right'][data-state='open'] {
        left: 100%;
        transform: translate(-100%, -50%);
        &::before {
            left: -2.5rem;
        }
        &::after {
            left: -3.5rem;
        }
    }
    // 閉じているときのhover共通
    &:has(.button_open:hover) {
        box-shadow: 0 0 1rem 0 rgba(black, 0.2);
        &::before {
            height: 11rem;
        }
        &::after {
            height: 8rem;
        }
    }
    // 左で閉じているときのhover
    &:has(.button_open:hover)[data-position='left'][data-state='close'] {
        transform: translate(calc(-100% + 2.5rem), -50%);
    }
    // 右で閉じているときのhover
    &:has(.button_open:hover)[data-position='right'][data-state='close'] {
        transform: translate(calc(0% - 2.5rem), -50%);
    }
    // 左で閉じているときのactive
    &:has(.button_open:active)[data-position='left'][data-state='close'] {
        transform: translate(calc(-100% + 1.5rem), -50%);
    }
    // 左で閉じているときのactive
    &:has(.button_open:active)[data-position='right'][data-state='close'] {
        transform: translate(calc(0% - 1.5rem), -50%);
    }
    &::before,
    &::after {
        content: '';
        display: block;
        background-color: var(--base);
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        opacity: 0.2;
        transition: all 0.1s ease;
        pointer-events: none;
    }
    &::before {
        width: 0.3rem;
        height: 9rem;
        border-radius: 10rem;
    }
    &::after {
        width: 0.3rem;
        height: 6rem;
        border-radius: 10rem;
    }
}
.ul {
    display: grid;
    grid-template-columns: 1fr;
    row-gap: 0.4rem;
    overflow-y: scroll;
    padding: 1.6rem 1.2rem;

    @extend %scrollbar-none;
}
.li {
    border-radius: 10rem;
    position: relative;
    &[data-current='true'] {
        &::after,
        &::before {
            content: '';
            display: block;
            width: calc(100% + 2rem);
            height: 0.1rem;
            border-radius: 10rem;
            background-color: var(--current);
            position: absolute;
        }
        &::after {
            bottom: 0;
        }
        &::before {
            bottom: calc(0% - 0.3rem);
        }
        [data-position='right'] & {
            &::after,
            &::before {
                left: calc(0% + 1.2rem);
            }
        }
        [data-position='left'] & {
            &::after,
            &::before {
                right: calc(0% + 1.2rem);
            }
        }
    }
}
.a {
    display: block;
    width: 100%;
    height: 100%;
    padding: 1rem 0.8rem 1rem 1.6rem;
    border-radius: 10rem;
    background-color: var(--sidemenu);
    border: 0.1rem solid var(--sidemenu);
    transition: background-color var(--time-fast) var(--ease-fast);
    @include hover {
        background-color: var(--sidemenu-dark);
    }
}
.i {
}
.span {
    display: block;
    @include font(large, var(--base));
    [data-current='true'] & {
        @include font(large-bold, var(--base));
        // transform: translateX(1rem);
    }
}
.menu {
    border-top: 0.1rem solid var(--base-thin);
    display: flex;
    justify-content: space-between;
    flex-direction: row-reverse;
    padding: 0.2rem;
    [data-position='right'] & {
        flex-direction: row;
    }
}

%button {
    cursor: pointer;
    border-radius: 100rem;
    width: 5rem;
    height: 5rem;
    display: grid;
    place-content: center;
    transition: border var(--base-time) ease;
    @include hover {
        background-color: var(--sidemenu-dark);
    }
}
%icon {
    width: 3rem;
    height: 3rem;
}
.button {
    &_close {
        @extend %button;
        svg {
            @extend %icon;
            stroke: var(--base);
            stroke-width: 0.15rem;
            transition: background-color var(--time-fast) var(--ease-fast);
        }
    }
    &_open {
        width: 4.5rem;
        height: 100%;
        position: absolute;
        top: 0;
        cursor: pointer;
        [data-position='left'][data-state='close'] & {
            right: 0;
            transform: translateX(100%);
            @include hover {
                width: 7rem;
                right: 2.5rem;
            }
        }
        [data-position='right'][data-state='close'] & {
            left: 0;
            transform: translateX(-100%);
            @include hover {
                width: 7rem;
                left: 2.5rem;
            }
        }
        [data-position='left'][data-state='open'] &,
        [data-position='right'][data-state='open'] & {
            display: none;
        }
    }
    &_position {
        @extend %button;
        svg {
            @extend %icon;
            fill: var(--base);
            transition: background-color var(--time-fast) var(--ease-fast);
        }
    }
}
